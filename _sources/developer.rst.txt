About Transpilers
=======================
The Transpiling Process
-----------------------
Input:
Adapt:
Transpile:
Output:

Adding new transpilers
----------------------
The Transpiler class provides an inteface for all transpiler instances. Every new transpiler must be a subclass of it.
It must implement the ... method
To make implicit methods possible, ... mus be implemented.
An example transpiler is Simple_C_Transpiler.
All in all, a new transpiler must look like this
Name, erbt von Transpiler, methoden/properties

Transpilers using a code template
---------------------------------
There is also an interface for transpilers that use a code template as a basis for generated code.
This is given by the TemplateTranspiler class. Examples that use this are the C_Transpiler or the OMP_Transpiler.
As a subclass of Transpiler these transpilers must also implement the ... methods.
Additionally, the following methods and properties must be implemented:
...

The following members can be changed for changes in functionality.

The template transpilers use an additional equation transpiler that provides an interface for generating code for the mathematical expressions.
All existing transpilers are for C-based languages and use the same C_Based_Equation_Transpiler.
An equation transpiler must implement the following methods.


Existing Transpilers
--------------------
.. currentmodule:: src.codegen
.. autosummary::
   omp_transpiler.OMP_Transpiler
   opencl_transpiler.OpenCL_Transpiler
   c_transpiler.C_Transpiler
   c_transpiler.Simple_C_Transpiler

.. .. currentmodule:: src.codegen.omp_transpiler
.. .. autosummary::
   OMP_Transpiler

Klassendiagramm
--------------------

.. inheritance-diagram::
   omp_transpiler.OMP_Transpiler
   opencl_transpiler.OpenCL_Transpiler
   cuda_transpiler.CUDA_Transpiler
   c_transpiler.C_Transpiler
   c_transpiler.Simple_C_Transpiler
   :parts: -1
   :top-classes: src.codegen.Transpiler.Transpiler


